generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// MODELOS DE AUTENTICAÇÃO E USUÁRIO (INTEGRADO COM CLERK E WHATSAPP)
// ===============================================
model User {
  id              String    @id
  email           String    @unique
  name            String?
  imageUrl        String?
  phoneNumber     String?   @unique
  whatsappConsent Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  darfs Darf[]
  portfolios     Portfolio[]
  monthlyResults MonthlyResult[]
}

model Darf {
  id          String    @id @default(cuid())
  userId      String
  month       Int       
  year        Int       
  assetType   AssetType 
  taxDue      Decimal   @db.Decimal(18, 8) 
  pdfUrl      String    
  isPaid      Boolean   @default(false) 
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, assetType])
}


model Portfolio {
  id        String   @id @default(cuid())
  name      String   @default("Carteira Principal")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets Asset[]

  @@unique([userId, name])
}

model Asset {
  id           String    @id @default(cuid())
  portfolioId  String
  symbol       String
  type         AssetType
  quantity     Decimal   @db.Decimal(18, 8) 
  averagePrice Decimal   @db.Decimal(18, 8) 
  targetPrice  Decimal?  @db.Decimal(18, 8) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([portfolioId, symbol])
}

model Transaction {
  id        String          @id @default(cuid())
  assetId   String
  type      TransactionType
  quantity  Decimal         @db.Decimal(18, 8) 
  unitPrice Decimal         @db.Decimal(18, 8) 
  fees      Decimal         @db.Decimal(18, 8) @default(0) 
  date      DateTime        
  createdAt DateTime        @default(now())
   operationType OperationType?
  retentionPeriod RetentionPeriod?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model MonthlyResult {
  id                 String        @id @default(cuid())
  userId             String
  month              Int
  year               Int
  assetType          AssetType
  operationType      OperationType
  totalSold          Decimal       @db.Decimal(18, 8) @default(0) 
  netProfit          Decimal       @db.Decimal(18, 8) @default(0) 
  accumulatedLoss    Decimal       @db.Decimal(18, 8) @default(0) 
  taxBase            Decimal       @db.Decimal(18, 8) @default(0) 
  taxDue             Decimal       @db.Decimal(18, 8) @default(0) 
  isPaid             Boolean       @default(false)
  notificationSentAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, assetType, operationType])
}


enum AssetType {
  ACAO
  FII
  CRIPTO
}

enum TransactionType {
  COMPRA
  VENDA
}

enum OperationType {
  SWING_TRADE
  DAY_TRADE
}

enum RetentionPeriod {
  CURTO_PRAZO
  LONGO_PRAZO
}