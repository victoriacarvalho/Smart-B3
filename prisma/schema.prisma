generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id
  email           String          @unique
  name            String?
  imageUrl        String?
  phoneNumber     String?         @unique
  whatsappConsent Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  darfs           Darf[]
  portfolios      Portfolio[]
  monthlyResults  MonthlyResult[]
  accumulatedLosses AccumulatedLoss[]
}

model Darf {
  id        String    @id @default(cuid())
  userId    String
  month     Int
  year      Int
  assetType AssetType
  taxDue    Decimal   @db.Decimal(18, 8)
  pdfUrl    String
  codigoReceita String?
  isPaid    Boolean   @default(false)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, assetType])
}

model Portfolio {
  id        String   @id @default(cuid())
  name      String   @default("Carteira Principal")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets Asset[]

  @@unique([userId, name])
}

model Asset {
  id           String    @id @default(cuid())
  portfolioId  String
  symbol       String
  type         AssetType
  quantity     Decimal   @db.Decimal(18, 8)
  averagePrice Decimal   @db.Decimal(18, 8)
  targetPrice  Decimal?  @db.Decimal(18, 8)
  isForeign    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([portfolioId, symbol])
}

model AccumulatedLoss {
  id            String   @id @default(cuid())
  userId        String
  year          Int
  month         Int
  operationType String
  amount        Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, operationType])
  @@index([userId, year, month])
}

model Transaction {
  id              String           @id @default(cuid())
  assetId         String
  type            TransactionType
  quantity        Decimal          @db.Decimal(18, 8)
  unitPrice       Decimal          @db.Decimal(18, 8)
  fees            Decimal          @default(0) @db.Decimal(18, 8)
  isDayTrade      Boolean          @default(false)
  date            DateTime
  createdAt       DateTime         @default(now())
  operationType   OperationType?
  retentionPeriod RetentionPeriod?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model MonthlyResult {
  id                 String        @id @default(cuid())
  userId             String
  month              Int
  year               Int
  assetType          AssetType
  operationType      OperationType
  totalSold          Decimal       @default(0) @db.Decimal(18, 8)
  netProfit          Decimal       @default(0) @db.Decimal(18, 8)
  accumulatedLoss    Decimal       @default(0) @db.Decimal(18, 8)
  taxBase            Decimal       @default(0) @db.Decimal(18, 8)
  taxDue             Decimal       @default(0) @db.Decimal(18, 8)
  isPaid             Boolean       @default(false)
  notificationSentAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, assetType, operationType])
}

enum AssetType {
  ACAO
  FII
  CRIPTO
}

enum TransactionType {
  COMPRA
  VENDA
}

enum OperationType {
  SWING_TRADE
  DAY_TRADE
}

enum RetentionPeriod {
  CURTO_PRAZO
  LONGO_PRAZO
}
